package puzzle 
{
	/**
	 * ...
	 * @author Sean Snyder
	 */
	public class PlayerAI extends Player
	{
		public static const EASY_DIFFICULTY:int = 2;
		public static const MEDIUM_DIFFICULTY:int = 4;
		public static const HARD_DIFFICULTY:int = 6;
		private var capturePointsGoal:int;
		private var pointGainChance:Number;
		private var difficulty:int;
		private var _currentPoints:int = 0;
		private var timePassed:Number = 0;
		public function PlayerAI(playerID:int, captureGoal:int = 60, pointGainPercent:Number = 0.25, aiDifficulty:int = EASY_DIFFICULTY) 
		{
			super(playerID);
			capturePointsGoal = captureGoal;
			pointGainChance = pointGainPercent;
			difficulty = aiDifficulty;
		}

		
		public function get currentPoints():int 
		{
			return _currentPoints;
		}
		
		public function update(game:GameSquares):void {
			
		}
		
		//update() - continueAttack() or beginNewAttack()
		//continueAttack() - random % chance to increase points gained and / or capture if enough points
		//beginNewAttack() - choose new nearby tile to attack (add some random delay)
		//capturePointsGoal:int - minimum points that ai will go for before capturing
		//pointGainChance:Number - %(per second) checked each tick that determines if player gains any points
		//possiblePointGains:Array - array of ints that can be given whenever points are gained [generated by difficulty setting]
	}

}